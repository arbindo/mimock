{
	"info": {
		"_postman_id": "f4d70688-d1b5-4d3d-8bd4-8e2118bfe97b",
		"name": "Mimock",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Mocks",
			"item": [
				{
					"name": "Create Mock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Awesome Mock {{$timestamp}}",
									"type": "text"
								},
								{
									"key": "route",
									"value": "/api/v1/testroute",
									"type": "text"
								},
								{
									"key": "httpMethod",
									"value": "POST",
									"type": "text"
								},
								{
									"key": "responseContentType",
									"value": "application/json",
									"type": "text"
								},
								{
									"key": "queryParams",
									"value": "serviceName=Student&version=1.0&active=true",
									"type": "text"
								},
								{
									"key": "shouldDoExactHeaderMatching",
									"value": "false",
									"type": "default"
								},
								{
									"key": "requestHeader",
									"value": "{\"Authorization\": \"nDFGdgfd_jhgjhZHHTdyhgfdghjdgjh\"}",
									"type": "default"
								},
								{
									"key": "requestBody",
									"value": "{ \"userId\": 1, \"id\": 1, \"title\": \"delectus aut autem\", \"completed\": false }",
									"type": "default"
								},
								{
									"key": "requestBodyType",
									"value": "application/json",
									"type": "default"
								},
								{
									"key": "statusCode",
									"value": "200",
									"type": "text"
								},
								{
									"key": "description",
									"value": "awesome description",
									"type": "text"
								},
								{
									"key": "expectedTextResponse",
									"value": "[\n  {\n    \"_id\": \"620955ea1157b8b9387a07a4\",\n    \"index\": 0,\n    \"guid\": \"4dd8ecac-105c-4de4-9e96-6bf16ddb1013\",\n    \"isActive\": false,\n    \"balance\": \"$1,042.76\",\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 20,\n    \"eyeColor\": \"green\",\n    \"name\": \"Jody Buckley\",\n    \"gender\": \"female\",\n    \"company\": \"OMATOM\",\n    \"email\": \"jodybuckley@omatom.com\",\n    \"phone\": \"+1 (803) 472-3637\",\n    \"address\": \"619 Alton Place, Elrama, Idaho, 8922\",\n    \"about\": \"Anim veniam irure veniam quis ex irure dolor fugiat reprehenderit nisi pariatur cillum. Adipisicing commodo deserunt laboris dolor adipisicing consequat deserunt excepteur consequat adipisicing est est laboris. Enim ad consectetur mollit elit pariatur.\\r\\n\",\n    \"registered\": \"2018-07-27T01:12:26 -06:-30\",\n    \"latitude\": 55.111467,\n    \"longitude\": 150.758028,\n    \"tags\": [\n      \"aute\",\n      \"non\",\n      \"commodo\",\n      \"nulla\",\n      \"anim\",\n      \"velit\",\n      \"ipsum\"\n    ],\n    \"friends\": [\n      {\n        \"id\": 0,\n        \"name\": \"Sellers Obrien\"\n      },\n      {\n        \"id\": 1,\n        \"name\": \"Eaton Battle\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Hattie Colon\"\n      }\n    ],\n    \"greeting\": \"Hello, Jody Buckley! You have 5 unread messages.\",\n    \"favoriteFruit\": \"apple\"\n  },\n  {\n    \"_id\": \"620955eabab7b4ea3761da3d\",\n    \"index\": 1,\n    \"guid\": \"1ae879ad-832a-4226-9315-1c65e2ef9a31\",\n    \"isActive\": false,\n    \"balance\": \"$3,302.39\",\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 24,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Hanson Trujillo\",\n    \"gender\": \"male\",\n    \"company\": \"VORTEXACO\",\n    \"email\": \"hansontrujillo@vortexaco.com\",\n    \"phone\": \"+1 (811) 572-3977\",\n    \"address\": \"343 Kane Place, Bodega, Georgia, 4378\",\n    \"about\": \"Cupidatat adipisicing duis eu qui eiusmod. Esse laboris tempor velit cillum quis proident nisi ut minim reprehenderit. Amet esse et ullamco id enim consectetur nisi dolore tempor. Minim consectetur pariatur ea proident exercitation pariatur est laborum excepteur veniam aliquip. Irure incididunt mollit ea ad culpa Lorem. Veniam culpa voluptate dolore laboris ullamco nisi aute deserunt in esse. Pariatur aliqua sit Lorem consequat in id deserunt aute aliquip.\\r\\n\",\n    \"registered\": \"2018-10-05T07:20:02 -06:-30\",\n    \"latitude\": 22.769105,\n    \"longitude\": 126.130469,\n    \"tags\": [\n      \"consequat\",\n      \"fugiat\",\n      \"ipsum\",\n      \"Lorem\",\n      \"qui\",\n      \"nulla\",\n      \"Lorem\"\n    ],\n    \"friends\": [\n      {\n        \"id\": 0,\n        \"name\": \"Guzman Robertson\"\n      },\n      {\n        \"id\": 1,\n        \"name\": \"Nielsen Mclaughlin\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Therese Randolph\"\n      }\n    ],\n    \"greeting\": \"Hello, Hanson Trujillo! You have 8 unread messages.\",\n    \"favoriteFruit\": \"banana\"\n  },\n  {\n    \"_id\": \"620955ea91b13f7955ea13ae\",\n    \"index\": 2,\n    \"guid\": \"568dec4c-7837-499a-ab5e-572925f115ae\",\n    \"isActive\": false,\n    \"balance\": \"$2,149.27\",\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 32,\n    \"eyeColor\": \"green\",\n    \"name\": \"Osborn Frye\",\n    \"gender\": \"male\",\n    \"company\": \"SCENTY\",\n    \"email\": \"osbornfrye@scenty.com\",\n    \"phone\": \"+1 (917) 581-2166\",\n    \"address\": \"964 Schroeders Avenue, Boonville, New Mexico, 4300\",\n    \"about\": \"Labore et tempor id fugiat consectetur ullamco exercitation. Ullamco cillum occaecat enim amet nisi consequat in. Velit adipisicing duis sit ex sit id minim. Voluptate incididunt Lorem in minim est excepteur ipsum fugiat. Laboris excepteur excepteur fugiat velit labore nisi Lorem consequat eu ex amet nisi laboris. Exercitation anim ea magna consectetur cillum sit aliquip aute consectetur.\\r\\n\",\n    \"registered\": \"2021-09-13T11:26:42 -06:-30\",\n    \"latitude\": 36.624264,\n    \"longitude\": 116.412831,\n    \"tags\": [\n      \"magna\",\n      \"sint\",\n      \"enim\",\n      \"velit\",\n      \"duis\",\n      \"laborum\",\n      \"esse\"\n    ],\n    \"friends\": [\n      {\n        \"id\": 0,\n        \"name\": \"Mccullough Vincent\"\n      },\n      {\n        \"id\": 1,\n        \"name\": \"Mabel Woods\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Vincent Hicks\"\n      }\n    ],\n    \"greeting\": \"Hello, Osborn Frye! You have 3 unread messages.\",\n    \"favoriteFruit\": \"banana\"\n  },\n  {\n    \"_id\": \"620955ea7bc4fe3bcb76e282\",\n    \"index\": 3,\n    \"guid\": \"ba6d530c-a593-4d00-ac4e-793ccb5fa2cf\",\n    \"isActive\": true,\n    \"balance\": \"$2,740.75\",\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 35,\n    \"eyeColor\": \"blue\",\n    \"name\": \"Barbara Barlow\",\n    \"gender\": \"female\",\n    \"company\": \"ENTOGROK\",\n    \"email\": \"barbarabarlow@entogrok.com\",\n    \"phone\": \"+1 (970) 586-3987\",\n    \"address\": \"370 Jamaica Avenue, Dexter, New York, 6668\",\n    \"about\": \"Incididunt minim enim quis ipsum culpa. Irure eiusmod tempor in adipisicing cupidatat adipisicing cupidatat cupidatat fugiat dolore sint nostrud. Aliquip quis ut non commodo dolor nisi. Aute reprehenderit ad et quis magna consequat culpa sit laboris esse aliqua dolore. Aute dolor aliqua elit enim magna minim cupidatat aliqua et officia proident sit. Exercitation id Lorem fugiat sunt ipsum ex sit duis irure cillum proident dolore duis sint.\\r\\n\",\n    \"registered\": \"2019-03-16T01:09:45 -06:-30\",\n    \"latitude\": -5.044935,\n    \"longitude\": -152.088944,\n    \"tags\": [\n      \"dolore\",\n      \"nisi\",\n      \"occaecat\",\n      \"Lorem\",\n      \"proident\",\n      \"ex\",\n      \"sint\"\n    ],\n    \"friends\": [\n      {\n        \"id\": 0,\n        \"name\": \"Tamera Boyle\"\n      },\n      {\n        \"id\": 1,\n        \"name\": \"Wong Russo\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Ana Rosario\"\n      }\n    ],\n    \"greeting\": \"Hello, Barbara Barlow! You have 8 unread messages.\",\n    \"favoriteFruit\": \"apple\"\n  },\n  {\n    \"_id\": \"620955ea75234fffe8e0d49a\",\n    \"index\": 4,\n    \"guid\": \"7d90ea8b-8782-4ec6-9d04-53f1022e6558\",\n    \"isActive\": false,\n    \"balance\": \"$1,719.06\",\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 34,\n    \"eyeColor\": \"green\",\n    \"name\": \"Reynolds Donovan\",\n    \"gender\": \"male\",\n    \"company\": \"CHILLIUM\",\n    \"email\": \"reynoldsdonovan@chillium.com\",\n    \"phone\": \"+1 (996) 567-2343\",\n    \"address\": \"553 Tapscott Avenue, Richmond, Alaska, 477\",\n    \"about\": \"Excepteur veniam tempor et esse est laboris aliquip dolore. Non sunt amet nulla elit nisi laborum ea dolor. Labore velit nostrud nostrud esse magna nulla in voluptate aute. Reprehenderit exercitation duis occaecat pariatur culpa Lorem aliquip culpa velit. In sint nisi dolor reprehenderit ut sunt consectetur irure cillum.\\r\\n\",\n    \"registered\": \"2021-01-29T03:26:57 -06:-30\",\n    \"latitude\": 87.403005,\n    \"longitude\": 167.858255,\n    \"tags\": [\n      \"incididunt\",\n      \"sint\",\n      \"cupidatat\",\n      \"consequat\",\n      \"ea\",\n      \"dolore\",\n      \"eu\"\n    ],\n    \"friends\": [\n      {\n        \"id\": 0,\n        \"name\": \"Jaime Austin\"\n      },\n      {\n        \"id\": 1,\n        \"name\": \"Delores Fowler\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Colette Jimenez\"\n      }\n    ],\n    \"greeting\": \"Hello, Reynolds Donovan! You have 2 unread messages.\",\n    \"favoriteFruit\": \"banana\"\n  },\n  {\n    \"_id\": \"620955eab59987ec352ed957\",\n    \"index\": 5,\n    \"guid\": \"be30f6a9-4d4b-425c-9034-5b85f09994f3\",\n    \"isActive\": false,\n    \"balance\": \"$1,889.49\",\n    \"picture\": \"http://placehold.it/32x32\",\n    \"age\": 26,\n    \"eyeColor\": \"green\",\n    \"name\": \"Pratt Hudson\",\n    \"gender\": \"male\",\n    \"company\": \"PROSELY\",\n    \"email\": \"pratthudson@prosely.com\",\n    \"phone\": \"+1 (836) 594-3970\",\n    \"address\": \"680 Utica Avenue, Yogaville, Ohio, 1603\",\n    \"about\": \"Veniam nostrud ea consequat et. Voluptate enim amet do mollit qui ea cupidatat duis eu elit excepteur id ut. Lorem tempor quis nulla duis mollit velit anim.\\r\\n\",\n    \"registered\": \"2018-09-23T11:00:19 -06:-30\",\n    \"latitude\": 38.917226,\n    \"longitude\": 111.333,\n    \"tags\": [\n      \"labore\",\n      \"irure\",\n      \"quis\",\n      \"officia\",\n      \"ad\",\n      \"consectetur\",\n      \"sunt\"\n    ],\n    \"friends\": [\n      {\n        \"id\": 0,\n        \"name\": \"Jacobson Ellison\"\n      },\n      {\n        \"id\": 1,\n        \"name\": \"Merle Fuller\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Parks Odom\"\n      }\n    ],\n    \"greeting\": \"Hello, Pratt Hudson! You have 7 unread messages.\",\n    \"favoriteFruit\": \"banana\"\n  }\n]",
									"type": "text"
								},
								{
									"key": "binaryFile",
									"contentType": "",
									"type": "file",
									"src": "/C:/Users/Aravind Venkatesan/OneDrive/Documents/sample.txt",
									"disabled": true
								},
								{
									"key": "responseHeaders",
									"value": "{\"x-trace-id\": \"sadf3w4fr\"}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Mock",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Updated Awesome Name 100",
									"type": "text"
								},
								{
									"key": "binaryFile",
									"contentType": "",
									"type": "file",
									"src": "/C:/Users/Aravind Venkatesan/OneDrive/Documents/sample.txt"
								},
								{
									"key": "route",
									"value": "/azure-api/deploy/v2",
									"type": "text"
								},
								{
									"key": "httpMethod",
									"value": "POST",
									"type": "text"
								},
								{
									"key": "responseContentType",
									"value": "application/json",
									"type": "text"
								},
								{
									"key": "queryParams",
									"value": "serviceName=Student;",
									"type": "text"
								},
								{
									"key": "statusCode",
									"value": "201",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Azure v2",
									"type": "text"
								},
								{
									"key": "shouldDoExactHeaderMatching",
									"value": "false",
									"type": "default"
								},
								{
									"key": "requestHeader",
									"value": "{\"Authorization\": \"nDFGdgfd_jhgjhZHHTdyhgfdghj23gjh\"}",
									"type": "default"
								},
								{
									"key": "requestBody",
									"value": "{ \"userId\": 2, \"id\": 1, \"title\": \"delectus aut autem\", \"completed\": false }",
									"type": "default"
								},
								{
									"key": "requestBodyType",
									"value": "application/json",
									"type": "default"
								},
								{
									"key": "responseHeaders",
									"value": "{\"x-api-trace-id\": \"sadf3w4fr\"}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/{{mockId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"{{mockId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Mocks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Mocks With Pagination And Status Filter",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/filter?status=NONE",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"filter"
							],
							"query": [
								{
									"key": "status",
									"value": "NONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mock By Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/{{mockId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"{{mockId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Mock By Id",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/{{mockId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"{{mockId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Force Delete Mock By Id",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/{{mockId}}:forceDelete",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"{{mockId}}:forceDelete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Mocks",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export Mocks CSV",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/csv/export",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"csv",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export Mock CSV Template",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/csv/template/export",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"csv",
								"template",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive Mock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/{{mockId}}:archive",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"{{mockId}}:archive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unarchive Mock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "default"
							}
						],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/mocks/{{mockId}}:unarchive",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"mocks",
								"{{mockId}}:unarchive"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Static Records",
			"item": [
				{
					"name": "List All Supported HTTP Methods",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/static-records/http-methods",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"static-records",
								"http-methods"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Supported Entity Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/static-records/entity-status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"static-records",
								"entity-status"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Supported Response Content Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/static-records/response-content-types",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"static-records",
								"response-content-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All User Roles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/static-records/user-roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"static-records",
								"user-roles"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "User Management",
					"item": [
						{
							"name": "Get All Users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/mimock/v1/admin/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"mimock",
										"v1",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-TOKEN",
										"value": "{{csrfToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Frodo Baggins\",\r\n    \"userName\": \"frodo1\",\r\n    \"password\": \"$2a$12$ZlN1NFw1WRhLb7Hn1BSFt.W.PkWjRa/I598Aab/WuXP4PM0QH9yau\",\r\n    \"userRole\": \"MANAGER\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/mimock/v1/admin/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"mimock",
										"v1",
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-TOKEN",
										"value": "{{csrfToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isUserActive\": true,\r\n    \"userName\": \"frodo1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/mimock/v1/admin/users/update-activation",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"mimock",
										"v1",
										"admin",
										"users",
										"update-activation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-TOKEN",
										"value": "{{csrfToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userName\": \"mimock_admin\",\r\n    \"password\": \"$2a$12$AnCFHRMd8.UlVlKUZxVpXeuBRaBd1G3LGJ1GTbQxBxTulzm0NpVmq\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/mimock/v1/admin/users/update-password",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"mimock",
										"v1",
										"admin",
										"users",
										"update-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-TOKEN",
										"value": "{{csrfToken}}",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userName\": \"frodo1\",\r\n    \"userRole\": \"ADMIN\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/mimock/v1/admin/users/update-role",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"mimock",
										"v1",
										"admin",
										"users",
										"update-role"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-XSRF-TOKEN",
										"value": "{{csrfToken}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "http://localhost:8080/api/mimock/v1/admin/users/delete-user?userName=frodo1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"mimock",
										"v1",
										"admin",
										"users",
										"delete-user"
									],
									"query": [
										{
											"key": "userName",
											"value": "frodo1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Info",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/mimock/v1/admin/users/user-info?userId=00000000-0000-0000-0000-000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"mimock",
										"v1",
										"admin",
										"users",
										"user-info"
									],
									"query": [
										{
											"key": "userId",
											"value": "00000000-0000-0000-0000-000000000000"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "test-mocks",
			"item": [
				{
					"name": "Mock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "nDFGdgfd_jhgjhZHHTdyhgfdghjdgjh",
								"type": "default"
							},
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"id\": 1,\r\n    \"title\": \"delectus aut autem\",\r\n    \"completed\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/testroute?serviceName=Student&version=1.0&active=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"testroute"
							],
							"query": [
								{
									"key": "serviceName",
									"value": "Student"
								},
								{
									"key": "version",
									"value": "1.0"
								},
								{
									"key": "active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Platform Settings",
			"item": [
				{
					"name": "List All Supported Platform Settings",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/platform-settings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"platform-settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Platform Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{csrfToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isExportImportEnabled\": true,\r\n\t\"isFlushBinCronEnabled\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/platform-settings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"platform-settings"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Authenticate",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"mimock_admin\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/user/authenticate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"user",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Auth Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/mimock/v1/auth-token/validate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"mimock",
								"v1",
								"auth-token",
								"validate"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const authToken = pm.collectionVariables.get(\"authToken\")",
					"",
					"var validateOpts = {",
					"    url: pm.variables.get(\"origin\") + \"/api/mimock/v1/auth-token/validate\",",
					"    method: 'GET',",
					"    header: {",
					"        'Content-type': 'application/json',",
					"        'Authorization': 'Bearer ' + authToken",
					"    }",
					"}",
					"",
					"pm.sendRequest(validateOpts, function (err, response) {",
					"    const jar = pm.cookies.jar();",
					"",
					"    jar.get(pm.variables.get(\"domain\"), 'XSRF-TOKEN', (err, cookie) => {",
					"        console.info(\"Cookie : \", cookie)",
					"        pm.collectionVariables.set(\"csrfToken\", cookie)",
					"    })",
					"",
					"    var options = {",
					"        url: pm.variables.get(\"origin\") + \"/api/mimock/v1/user/authenticate\",",
					"        method: 'POST',",
					"        header: {",
					"            'Content-type': 'application/json'",
					"        },",
					"        body: JSON.stringify({",
					"            \"userName\": \"mimock_admin\",",
					"            \"password\": \"password\"",
					"        })",
					"    }",
					"",
					"    pm.sendRequest(options, function (err, response) {",
					"        if (err) {",
					"            console.error(err)",
					"            return",
					"        }",
					"",
					"        const res = response.json()",
					"        console.log(res)",
					"        if (res.token) {",
					"            pm.collectionVariables.set(\"authToken\", res.token)",
					"            console.log(pm.collectionVariables.get(\"authToken\"))",
					"        }",
					"    });",
					"});",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mockId",
			"value": "f3bd4cb2-2af5-49b2-af39-9ec7addd571f",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "{will be filled by pre-request script}",
			"type": "default"
		},
		{
			"key": "origin",
			"value": "http://localhost:8080",
			"type": "default"
		},
		{
			"key": "securedOrigin",
			"value": "https://localhost:8080",
			"type": "default"
		},
		{
			"key": "domain",
			"value": "localhost",
			"type": "default"
		},
		{
			"key": "csrfToken",
			"value": "{will be filled by pre-request script}",
			"type": "default"
		}
	]
}